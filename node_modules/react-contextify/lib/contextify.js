'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var contextify = function contextify() {
    var childContextTypes = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var mapPropsToContext = arguments.length <= 1 || arguments[1] === undefined ? function () {
        return {};
    } : arguments[1];
    return function (WrappedComponent) {
        var Contextify = function (_Component) {
            _inherits(Contextify, _Component);

            function Contextify() {
                _classCallCheck(this, Contextify);

                return _possibleConstructorReturn(this, Object.getPrototypeOf(Contextify).apply(this, arguments));
            }

            _createClass(Contextify, [{
                key: 'getChildContext',
                value: function getChildContext() {
                    return mapPropsToContext(this.props);
                }
            }, {
                key: 'render',
                value: function render() {
                    return _react2["default"].createElement(WrappedComponent, this.props);
                }
            }]);

            return Contextify;
        }(_react.Component);

        Contextify.childContextTypes = childContextTypes;

        return (0, _hoistNonReactStatics2["default"])(Contextify, WrappedComponent);
    };
};

exports["default"] = contextify;